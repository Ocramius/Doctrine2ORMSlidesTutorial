<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <title>Doctrine 2 ORM Tutorial</title>
        
        <!-- jQuery + history plugin -->
        <script type="text/javascript" src="vendor/slippy/src/jquery.min.js"></script>
        <script type="text/javascript" src="vendor/slippy/src/jquery.history.js"></script>

        <!-- Slippy core js file -->
        <script type="text/javascript" src="vendor/slippy/src/slippy.js"></script>

        <!-- Slippy structural styles -->
        <link type="text/css" rel="stylesheet" href="vendor/slippy/src/slippy.css"/>

        <!-- Slippy theme (feel free to change it) -->
        <link type="text/css" rel="stylesheet" href="vendor/slippy/src/slippy-pure.css"/>
        
        <!-- Syntax highlighting core file  -->
        <script type="text/javascript" src="vendor/slippy/src/highlighter/shCore.js"></script>
        
        <!-- Syntax highlighting core CSS and a theme -->
        <link type="text/css" rel="stylesheet" href="vendor/slippy/src/highlighter/shCore.css"/>
        <link type="text/css" rel="stylesheet" href="vendor/slippy/src/highlighter/shThemeEclipse.css"/>
        
        <!-- Syntax highlighting brushes, this one is only for php -->
        <script type="text/javascript" src="vendor/slippy/src/highlighter/shBrushPhp.js"></script>
        <script type="text/javascript" src="vendor/slippy/src/highlighter/shBrushBash.js"></script>
        
        <script type="text/javascript">
            $(function() {
                $(".slide").slippy({});
                SyntaxHighlighter.all();
            });
        </script>
        <style type="text/css">
            pre {
                font-size: 60%;
                line-height: 0.8;
            }
            .pro {
                color: #008200;
            }
            .cons {
                color: #ff0000;
            }
        </style>
    </head>
    <body>
        <div class="slide" style="text-align: center;">
            <h1>Doctrine 2 ORM</h1>
            <h3>Object Relational Mapper for PHP 5.3</h3>
            <p style="padding-top: 20px;">
                <img src="image/common_icon.png" alt="Doctrine"/>
            </p>
        </div>
        <div class="slide">
            <h2>Some history of RDBMS persistence in PHP:</h2>
            <ol>
                <li>mysql_query, mysql_fetch_array, mysql_*</li>
                <li>mysqli, PDO</li>
                <li>Doctrine 1.2, Propel 1.6, Zend_Db</li>
            </ol>
        </div>
        <div class="slide">
            <h2>mysql_query</h2>
        </div>
        <div class="slide">
            <pre class="brush: php">
mysql_connect('localhost', 'user', 'password');
mysql_select_db('test');

//simple example
mysql_query('INSERT INTO greetings (content) VALUES ("' . mysql_real_escape_string($_POST['greeting']) . '")');

//comments example
mysql_query('INSERT INTO users (username) VALUES ("' . mysql_real_escape_string($_POST['username']) . '")');
mysql_query('INSERT INTO comments (user_id, content) VALUES (' . mysql_insert_id() . ', "' . mysql_real_escape_string($_POST['content']) . '")');
            </pre>
        </div>
        <div class="slide">
            <h3>mysql_query</h3>
            <ul>
                <li class="cons">
                    We had to write our queries and our security (mysql_real_escape_string()) by ourselves.
                </li>
                <li class="cons">
                    Also, we had to keep track of identifiers of the inserted fields by ourselves.
                </li>
                <li class="cons">
                    We had to rewrite every function name (and probably also functionality) when switching database vendor.
                </li>
                <li class="cons">
                    Not really OO friendly, heh?
                </li>
            </ul>
        </div>
        <div class="slide">
            <h2>PDO</h2>
        </div>
        <div class="slide">
            <pre class="brush: php">
try {
    $dbh = new PDO('mysql:host=localhost;dbname=test', 'user', 'password');
    
    //simple example
    $sth = $dbh-&gt;prepare('INSERT INTO greetings (content) VALUES (:content);
    $sth-&gt;execute(array(':content' =&gt; $_POST['content']));
    
    //comments example
    $sth = $dbh-&gt;prepare('INSERT INTO users (username) VALUES (:username)');
    $sth-&gt;execute(array(':username' =&gt; $_POST['username']));
    $sth = $dbh-&gt;prepare('INSERT INTO comments (user_id, content) VALUES (user_id, :content)');
    $sth-&gt;execute(array(':user_id' =&gt; $dbh-&gt;lastInsertId(), ':content' =&gt; $_POST['content']);
    
} catch (PDOException $e) {
    echo $e-&gt;getMessage();
}
            </pre>
        </div>
        <div class="slide">
            <h3>PDO</h3>
            <ul>
                <li class="pro">
                    We now can connect to different databases. MySQL is no more the only option!
                </li>
                <li class="pro">
                    Security is given by named parameters, escaped for us by PDO!
                </li>
                <li class="pro">
                    Prepared statements make our queries easier to reuse!
                </li>
                <li class="pro">
                    Exceptions are used, we can now catch them!
                </li>
                <li class="cons">
                    Queries are still performed in the SQL dialect of the vendor, which could make our code not 100% portable.
                </li>
                <li class="cons">
                    Still have to keep track of identifiers of the inserted fields by ourselves.
                </li>
            </ul>
        </div>
        <div class="slide">
            <h2>Doctrine 1.2</h2>
            <p>An Active Record implementation</p>
        </div>
        <div class="slide">
            <h3>Greeting record definition</h3>
            <pre class="brush: php">
class Greeting extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this-&gt;setTableName('greetings');
        $this-&gt;hasColumn(
            'content',
            'string',
            255,
            array(
                'type' =&gt; 'string',
                'length' =&gt; '255'
            )
        );
    }
    
}
            </pre>
        </div>
        <div class="slide">
            <pre class="brush: php">
//simple example
$greeting = new Greeting();
$greeting-&gt;content = $_POST['content'];
$greeting-&gt;save();
            </pre>
        </div>
        <div class="slide">
            <h3>User record definition</h3>
            <pre class="brush: php">
class User extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this-&gt;setTableName('users');
        $this-&gt;hasColumn(
            'username',
            'string',
            255,
            array(
                'type' =&gt; 'text',
            )
        );
    }
    
    public function setUp()
    {
        $this-&gt;hasMany(
            'Comments as Comments',
            array(
                'refClass' =&gt; 'Comment',
                'local' =&gt; 'id',
                'foreign' =&gt; 'user_id'
            )
        );
    }
}
            </pre>
        </div>
        <div class="slide">
            <h3>Person record definition</h3>
            <pre class="brush: php">
class Comment extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this-&gt;setTableName('comments');
        $this-&gt;hasColumn(
            'content',
            'string',
            255,
            array(
                'type' =&gt; 'string',
                'length' =&gt; '255'
            )
        );
        $this-&gt;hasColumn(
            'user_id',
            'string',
            255,
            array(
                'type' =&gt; 'integer',
            )
        );
    }
    
    public function setUp()
    {
        $this-&gt;hasOne(
            'User',
            array(
                'refClass' =&gt; 'User',
                'local' =&gt; 'user_id',
                'foreign' =&gt; 'id'
            )
        );
    }
}
            </pre>
        </div>
        <div class="slide">
            <pre class="brush: php">
//comments example
$user = new User();
$user-&gt;username = $_POST['username'];
$comment = new Comment();
$comment->content = $_POST['content'];
$user-&gt;Comments[] = $comment;
$comment-&gt;User = $user;
$user-&gt;save();
            </pre>
        </div>
        <div class="slide">
            <h3>Doctrine 1.2</h3>
            <ul>
                <li class="pro">
                    Objects are written to DB by Doctrine: no more SQL!
                </li>
                <li class="pro">
                    Associations are managed by Doctrine: no more foreign key mess!
                </li>
                <li class="pro">
                    Object-Oriented approach!
                </li>
                <li class="pro">
                    Database is abstracted by a powerful DBAL layer: no more SQL portability troubles!
                </li>
                <li class="pro">
                    Database can be generated by our models!
                </li>
                <li class="cons">
                    Table definition is set in our domain logic.
                </li>
                <li class="cons">
                    A lot of PHP "magic" is happening (__set, __get, etc.).
                </li>
                <li class="cons">
                    Our objects must extend Doctrine_Record to be used with Doctrine
                </li>
            </ul>
        </div>
        <div class="slide">
            <h2>Doctrine 2</h2>
        </div>
        <div class="slide">
            <h3>What is Doctrine 2?</h3>
            <ul>
                <li class="pro">
                    Doctrine 2 is a Data Mapper implementation:
                    <br/>
                    <img src="image/databaseMapperSketch.gif" alt="Data Mapper" width="60%" style="margin: 10px;"/>
                </li>
                <li class="pro">
                    Doctrine 2 is a Data Mapper implementation:
                </li>
                <li class="pro">
                    Follows the well known Java Persistence API (JPA, aka JSR 317)
                </li>
                <li class="pro">
                    It separates persistence and domain logic. You are now able to port your logic to SQL, NoSQL, XML mappers, etc.
                </li>
                <li class="pro">
                    It provides around 3X better performance than Doctrine 1.2.
                </li>
                <li class="pro">
                    Your objects won't need to extend anything.
                </li>
                <li class="pro">
                    You are free to save anything you want to your database, just map it!
                </li>
                <li class="pro">
                    You can even map existing classes to database tables!
                </li>
            </ul>
        </div>
        <div class="slide">
            <h2>Doctrine 2 Requirements</h2>
            <ul>
                <li>
                    PHP 5.3
                </li>
                <li>
                    Doctrine\Common (bundled)
                    <br/>
                    &#160;&#160;A set of utilities common to all Doctrine projects
                </li>
                <li>
                    Doctrine\DBAL (bundled)
                    <br/>
                    &#160;&#160;A very powerful Database ABstraction Layer
                </li>
                <li>
                    Symfony\Component\Console (bundled)
                    <br/>
                    &#160;&#160;A CLI runner tool
                </li>
                <li>
                    Symfony\Component\Yaml (bundled)
                    <br/>
                    &#160;&#160;If you work with YAML configuration
                </li>
            </ul>
        </div>
        <div class="slide">
            <h2>Getting started</h2>
            <pre class="brush: bash">
mkdir doctrine-demo
cd doctrine-demo
mkdir library
mkdir library/Entity
touch library/Entity/Greeting.php
mkdir library/EntityProxy
chmod +w library/EntityProxy
git clone https://github.com/doctrine/doctrine2.git --recursive library/doctrine-orm
touch bootstrap.php
            </pre>
        </div>
        <div class="slide">
            <h2>Create entities...</h2>
        </div>
        <div class="slide">
            <pre class="brush: php">
namespace Entity;

class Greeting
{
    /** @var int */
    private $id;
    
    /** @var string */
    private $content;
    
}
            </pre>
        </div>
        <div class="slide">
            <h2>...add getters, setters, constructors, other methods...</h2>
        </div>
        <div class="slide">
            <pre class="brush: php">
namespace Entity;

class Greeting
{
    
    /** @var int */
    private $id;
    
    /** @var string */
    private $content;
    
    public function <strong>__construct($content)</strong> {
        $this->setContent($content);
    }
    
    /**
     * @return int
     */
    public function <strong>getId()</strong> {
        return $this->id;
    }
    
    /**
     * @return string
     */
    public function <strong>getContent()</strong> {
        return $this->content;
    }
    
    /**
     * @param string $content
     */
    public function <strong>setContent($content)</strong> {
        $this->content = (string) $content;
    }
    
}
            </pre>
        </div>
        <div class="slide">
            <h2>...add mappings (@Annotations) to entities...</h2>
        </div>
        <div class="slide">
            <pre class="brush: php">
namespace Entity;

use <strong>Doctrine\ORM\Mapping as ORM</strong>;

/**
 * <strong>@ORM\Entity</strong>
 */
class Greeting
{
    
    /**
     * <strong>@ORM\Id()</strong>
     * <strong>@ORM\Column(type="integer")</strong>
     * <strong>@ORM\GeneratedValue(strategy="AUTO")</strong>
     * @var int
     */
    private $id;
    
    /**
     * <strong>@ORM\Column(type="string", length=255)</strong>
     * @var string
     */
    private $content;
    
    public function __construct($content) {
        $this->setContent($content);
    }
    
    /**
     * @return int
     */
    public function getId() {
        return $this->id;
    }
    
    /**
     * @return string
     */
    public function getContent() {
        return $this->content;
    }
    
    /**
     * @param string $content
     */
    public function setContent($content) {
        $this->content = (string) $content;
    }
    
}
            </pre>
        </div>
        <div class="slide">
            <h2>Creating an EntityManager</h2>
        </div>
        <div class="slide">
            <h3>Autoloading:</h3>
            <pre class="brush: php">
&lt;?php
// bootstrap.php
use Doctrine\ORM\Tools\Setup,
    Doctrine\ORM\EntityManager,
    Doctrine\ORM\Configuration,
    Doctrine\Common\Cache\ArrayCache as Cache,
    Doctrine\Common\Annotations\AnnotationRegistry,
    Doctrine\Common\ClassLoader;

//autoloading
require_once __DIR__ . '/library/doctrine-orm/lib/Doctrine/ORM/Tools/Setup.php';
Setup::registerAutoloadGit(__DIR__ . 'library/doctrine-orm');
$loader = new ClassLoader('Entity', __DIR__ . '/library');
$loader->register();
$loader = new ClassLoader('EntityProxy', __DIR__ . '/library');
$loader->register();
            </pre>
        </div>
        <div class="slide">
            <h3>Configuration and metadata</h3>
            <pre class="brush: php">
//configuration
$config = new Configuration();
$cache = new Cache();
$config-&gt;setQueryCacheImpl($cache);
$config-&gt;setProxyDir(__DIR__ . '/library/EntityProxy');
$config-&gt;setProxyNamespace('EntityProxy');
$config-&gt;setAutoGenerateProxyClasses(true);

//mapping (example uses annotations, could be any of XML/YAML or plain PHP)
AnnotationRegistry::registerFile(__DIR__ . '/library/doctrine-orm/lib/Doctrine/ORM/Mapping/Driver/DoctrineAnnotations.php');
$driver = new Doctrine\ORM\Mapping\Driver\AnnotationDriver(
    new Doctrine\Common\Annotations\AnnotationReader(),
    array(__DIR__ . '/library/Entity')
);
$config->setMetadataDriverImpl($driver);
$config->setMetadataCacheImpl($cache);
            </pre>
        </div>
        <div class="slide">
            <h3>Creating the EntityManager</h3>
            <pre class="brush: php">
//getting the EntityManager
$em = EntityManager::create(
    array(
        'driver' =&gt; 'pdo_sqlite',
        'path' =&gt; 'database.sqlite'
    ),
    $config
);
            </pre>
        </div>
        <div class="slide">
            <h3>Final result:</h3>
            <pre class="brush: php">
&lt;?php
// bootstrap.php
use Doctrine\ORM\Tools\Setup,
    Doctrine\ORM\EntityManager,
    Doctrine\ORM\Configuration,
    Doctrine\Common\Cache\ArrayCache as Cache,
    Doctrine\Common\Annotations\AnnotationRegistry,
    Doctrine\Common\ClassLoader;

//autoloading
require_once __DIR__ . '/library/doctrine-orm/lib/Doctrine/ORM/Tools/Setup.php';
Setup::registerAutoloadGit(__DIR__ . '/library/doctrine-orm');
$loader = new ClassLoader('Entity', __DIR__ . '/library');
$loader->register();
$loader = new ClassLoader('EntityProxy', __DIR__ . '/library');
$loader->register();

//configuration
$config = new Configuration();
$cache = new Cache();
$config-&gt;setQueryCacheImpl($cache);
$config-&gt;setProxyDir(__DIR__ . '/library/EntityProxy');
$config-&gt;setProxyNamespace('EntityProxy');
$config-&gt;setAutoGenerateProxyClasses(true);

//mapping (example uses annotations, could be any of XML/YAML or plain PHP)
AnnotationRegistry::registerFile(__DIR__ . '/library/doctrine-orm/lib/Doctrine/ORM/Mapping/Driver/DoctrineAnnotations.php');
$driver = new Doctrine\ORM\Mapping\Driver\AnnotationDriver(
    new Doctrine\Common\Annotations\AnnotationReader(),
    array(__DIR__ . '/library/Entity')
);
$config->setMetadataDriverImpl($driver);
$config->setMetadataCacheImpl($cache);

//getting the EntityManager
$em = EntityManager::create(
    array(
        'driver' =&gt; 'pdo_sqlite',
        'path' =&gt; 'database.sqlite'
    ),
    $config
);
            </pre>
        </div>
        <div class="slide">
            <h2>Generating the schema</h2>
            <h3>(Configuring doctrine-cli.php)</h3>
        </div>
        <div class="slide">
            <h3>CLI runner</h3>
            <pre class="brush: php">
&lt;?php
//doctrine-cli.php
use Symfony\Component\Console\Helper\HelperSet,
    Doctrine\ORM\Tools\Console\Helper\EntityManagerHelper,
    Doctrine\DBAL\Tools\Console\Helper\ConnectionHelper,
    Doctrine\ORM\Tools\Console\ConsoleRunner;
require_once __DIR__ . '/bootstrap.php';

$helperSet = new HelperSet(array(
    'em' => new EntityManagerHelper($em),
    'conn' => new ConnectionHelper($em->getConnection())
));
ConsoleRunner::run($helperSet);
            </pre>
        </div>
        <div class="slide">
            <h3>Generating the schema</h3>
            <pre class="brush: bash">
$ php doctrine-cli.php orm:schema-tool:create
ATTENTION: This operation should not be executed in a production environment.

Creating database schema...
Database schema created successfully!
            </pre>
        </div>
        <div class="slide">
            <p>Generated database as seen by SQLite browser</p>
            <img src="image/database-status.png" alt="Generated Database"/>
        </div>
        <div class="slide">
            <h2>Working with the EntityManager</h2>
        </div>
        <div class="slide">
            <h3>Saving a "Entity\Greeting" object</h3>
            <pre class="brush: php">
&lt;?php
//examples/1.php

use Entity\Greeting;

require_once __DIR__ . '/../bootstrap.php';

//Creating our greeting
$greeting = new Greeting('Hello World!');

//Registering $greeting with the EntityManager
$em->persist($greeting);

//Flushing all changes to database
$em->flush();

echo 'OK!';
            </pre>
        </div>
        <div class="slide">
            <h3>Retrieving an "Entity\Greeting" object</h3>
            <pre class="brush: php">
&lt;?php
//examples/2.php
require_once __DIR__ . '/../bootstrap.php';

//Finding Greeting with id = 1
$greeting = $em->find('Entity\Greeting', 1);

if($greeting) {
    //The EntityManager has already provided us an object of type Entity\Greeting!
    echo 'Found a greeting (instance of ' . get_class($greeting)
        . ') with content ' . $greeting->getContent();
}else{
    echo 'Couldn\'t find Greeting with id=1';
}
            </pre>
        </div>
        <div class="slide">
            <h3>Updating an "Entity\Greeting" object</h3>
            <pre class="brush: php">
&lt;?php
//examples/3.php
require_once __DIR__ . '/../bootstrap.php';

//Finding Greeting with id = 1
$greeting = $em->find('Entity\Greeting', 1);

if($greeting) {
    echo $greeting->getContent() . PHP_EOL;
    echo 'Changing the contents of found Greeting to "Hello Test!"' . PHP_EOL;
    //Using Entity\Greeting to set a new content for the $greeting!
    $greeting->setContent('Hello Test!');
    //Flushing changes to database (triggers SQL updates)
    $em->flush();
    echo 'Now try loading 2.php again!' . PHP_EOL;
}else{
    echo 'Couldn\'t find Greeting with id=1';
}
            </pre>
        </div>
        <div class="slide">
            <h3>Finding "Entity\Greeting" objects</h3>
            <pre class="brush: php">
&lt;?php
//examples/4.php
require_once __DIR__ . '/../bootstrap.php';

//A repository is like a "Table" containing our entities of a specified type
$repository = $em->getRepository('Entity\Greeting');

//Finding all Entity\Greeting with content = "Hello World!"
$worldGreetings = $repository->findBy(array('content' => 'Hello World!'));

//Finding all Entity\Greeting with content = "Hello Test!"
$testGreetings = $repository->findBy(array('content' => 'Hello Test!'));

//Displaying results
echo 'Found ' . count($worldGreetings) . ' "Hello World!" greetings:' . PHP_EOL;
foreach($worldGreetings as $worldGreeting) {
    echo ' - ' . $worldGreeting->getId() . PHP_EOL;
}

echo 'Found ' . count($testGreetings) . ' "Hello World!" greetings:' . PHP_EOL;
foreach($testGreetings as $testGreeting) {
    echo ' - ' . $testGreeting->getId() . PHP_EOL;
}
            </pre>
        </div>
        <div class="slide">
            <h3>Retrieving "Entity\Greeting" objects via DQL</h3>
            <pre class="brush: php">
&lt;?php
//examples/5.php
require_once __DIR__ . '/../bootstrap.php';

//Creating a DQL query that selects all greetings with id >= 5 and id &lt;= 10
$greetings = $em
    ->createQuery('SELECT g FROM Entity\Greeting g WHERE g.id >= 5 AND g.id &lt;= 10')
    ->getResult();

//Displaying results
echo 'Found ' . count($greetings) . ' Entity\Greeting:' . PHP_EOL;
foreach($greetings as $greeting) {
    echo ' - ' . $greeting->getId() . ' => ' . $greeting->getContent() . PHP_EOL;
}
            </pre>
        </div>
        <div class="slide">
            <h3>Deleting "Entity\Greeting" objects</h3>
            <pre class="brush: php">
&lt;?php
//examples/6.php
require_once __DIR__ . '/../bootstrap.php';

//Finding the last inserted greeting
$greetings = $em
    ->createQuery('SELECT g FROM Entity\Greeting g ORDER BY g.id DESC')
    ->setMaxResults(1) //we want only one result
    ->getResult();

if(!empty($greetings)) {
    $greeting = reset($greetings);
    echo 'Found greeting with id "' . $greeting->getId()
        . '" and content "' . $greeting->getContent() . '"' . PHP_EOL;
    $em->remove($greeting);
    //Triggers delete
    $em->flush();
    echo 'Greeting deleted!' . PHP_EOL;
} else {
    echo 'Could not find any Greeting' . PHP_EOL;
}
            </pre>
        </div>
        <div class="slide">
            <h2>Working with associations</h2>
        </div>
        <div class="slide">
            <h3>You will need additional code:</h3>
            <ul>
                <li>Entity\Post</li>
                <li>Entity\Comment</li>
            </ul>
        </div>
        <div class="slide">
            <h3>We don't define IDs, we define how objects are related:</h3>
            <p>
                <strong>ONE</strong> Entity\Post
                <br/>
                &#160;&#160;<strong>HAS MANY</strong> Entity\Comment
            </p>
            <p>
                <strong>ONE</strong> Entity\Comment
                <br/>
                &#160;&#160;<strong>HAS ONE</strong> Entity\Post
            </p>
        </div>
        <div class="slide">
            <h3>In Doctrine terms:</h3>
            <p>
                Entity\Post::comments
                <br/>
                &#160;&#160; is a <strong>OneToMany</strong> relation to <strong>Entity\Comment</strong>, <strong>mapped by</strong> Entity\Comment#post
            </p>
            <p>
                Entity\Comment::post
                <br/>
                &#160;&#160; is a <strong>ManyToOne</strong> relation to <strong>Entity\Post</strong>, <strong>inversed by</strong> Entity\Post#comments
            </p>
        </div>
        <div class="slide">
            <h3>Available relations:</h3>
            <ul>
                <li>
                    OneToMany (mapped by ManyToOne)
                </li>
                <li>
                    ManyToOne (inversed by OneToMany)
                </li>
                <li>
                    OneToOne (inversed/mapped by OneToOne)
                </li>
                <li>
                    ManyToMany (inversed/mapped by ManyToMany)
                </li>
            </ul>
            <p>
                OneToMany and ManyToMany relations are represented in Doctrine by instances of the Doctrine\Common\Collections\Collection interface.
            </p>
        </div>
        <div class="slide">
            <h3>Relations ownership</h3>
            <p>
                Relationship between entities may be <strong>inversed (bidirectional)</strong> or <strong>unidirectional</strong>.
            </p>
        </div>
        <div class="slide">
            <p>
                There is always an <strong>owning side</strong> of the relation.
            </p>
            <p>
                A bidirectional relationship has both an <strong>owning side</strong> and an <strong>inverse side</strong>.
            </p>
            <p>
                A unidirectional relationship has only an <strong>owning side</strong>.
            </p>
            <p>
                The <strong>owning side</strong> of the relation <strong>is the one checked by Doctrine</strong> to determine changes to the relation graph.
            </p>
        </div>
        <div class="slide">
            <p>
                Some rules apply to relations, you can read them at
                <br/>
                <a href="http://www.doctrine-project.org/docs/orm/2.0/en/reference/association-mapping.html" target="_blank">
                    http://www.doctrine-project.org/docs/orm/2.0/en/reference/association-mapping.html
                </a>
            </p>
            <p>
                <strong>Please be sure to have read them before getting to work with Doctrine.</strong>
            </p>
        </div>
        <div class="slide">
            <h2>Using associations</h2>
            <h3>We will map some entities to check how associations work...</h3>
        </div>
    </body>
</html>
